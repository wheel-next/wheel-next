{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to WheelNext","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Content to be added here.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>All contributions are very welcome and appreciated! Ways to contribute include:</p> <ul> <li>Improving existing content on the website: extending or clarifying   descriptions, adding relevant references, diagrams, etc.</li> <li>Providing feedback on existing content</li> <li>Proposing new topics for inclusion on the website, and writing the content for them</li> <li>... and anything else you consider useful!</li> </ul> <p>The content for this website is maintained on GitHub.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<ul> <li>Initial development effort was led by NVIDIA</li> <li>Many ideas, formulations and this template are inhereted from PyPackaging Native</li> </ul>"},{"location":"glossary/","title":"Glossary","text":"<p>This page is borrowed from pypackaging-native and added as a reference.</p>"},{"location":"glossary/#acronyms","title":"Acronyms","text":"Acronym ... stands for Explanation ABI Application Binary Interface See here API Application Programming Interface The sum total of available functions, classes, etc. of a given program ARM Advanced RISC Machines Family of RISC architectures, second-most widely used processor family after x86 AVX Advanced Vector eXtensions Various extensions to the x86 instruction set (AVX, AVX2, AVX512), evolution after SSE BLAS Basic Linear Algebra Subprograms Specification resp. implementation for low-level linear algebra routines BOLT Binary Optimization and Layout Tool See here <code>cffi</code> The C FFI for Python See here CI Continuous Integration Testing all changes made to a given software, resp. the infrastructure that makes this possible CLI Command Line Interface CPU Central Processing Unit Main circuitry for executing machine instructions on a computer; contrast GPU CRAN Comprehensive R Archive Network Main index for R language packages, comparable to PyPI CUDA Compute Unified Device Architecture Parallel Computing Framework for NVIDIA GPUs DRY Don't Repeat Yourself Principle in software development aimed at reducing repetition GCC GNU Compiler Collection Main compiler family (for C / C++ / Fortran etc.) on Linux GUI Graphical UI GNU GNU's Not Unix Collection of free software packages under GPL License GPL (GNU) General Public License Foundational \"copyleft\" license of the free software movement glibc GNU C Library Widely used implementation of the C standard library FFI Foreign Function Interface Calling functions written in a different language than the one currently used GPU Graphics Processing Unit Specialized circuitry for quickly computing graphics-related tasks ILP64 - Name used for the standard 64-bit interface to BLAS/LAPACK. Also see \"(64 bit) Data Models\" below IR Intermediate Representation Language-agnostic yet still semantic representation of code within a compiler LAPACK Linear Algebra PACKage Standard software library for numerical linear algebra ISA Instruction Set Architecture Specification of an instruction set for a CPU; e.g. x86-64, arm64, ... JIT Just-in-time Compilation Compiling code just before execution; used in CUDA, PyTorch, PyPy, Numba etc. LLVM - Cross-platform compiler framework, home of Clang, MLIR, BOLT etc. LTO Link-Time Optimization See here LTS Long-Term Support Version of a given software/library/distribution designated for long-term support musl - An alternative implementation of the C standard library MPI Message Passing Interface Standard for message-passing in parallel computing MLIR Multi-Level IR Higher-level IR within LLVM; used i.a. in machine learning frameworks MSVC Microsoft Visual C++ Main compiler on Windows NEP Numpy Enhancement Proposal See here OpenMP Open Multi Processing Multi-platform API for enabling multi-processing in C/C++/Fortran OS Operating System E.g. Linux, MacOS, Windows PEP Python Enhancement Proposal See here <code>pip</code> Pip Installs Packages Default installer for Python packages, distributed with CPython itself; see here PGO Profile-Guided Optimization See here PSF Python Software Foundation See here PyPA Python Packaging Authority Group which maintains core set of projects in Python packaging PyPI Python Package Index Main index where packages get installed from PyPy - An implementation of the Python specification in (quasi-)Python, with JIT capabilities QEMU Quick EMUlator Predominant emulation framework on Linux RHEL Red Hat Enterprise Linux Commercial distribution with some of the longest-running support timelines RISC Reduced Instruction Set Computer Paradigm underlying many past and current CPU architectures ROCm Radeon Open Compute Software stack for AMD GPUs; comparable to CUDA <code>sdist</code> Source DISTribution An archive of the source code of a Python project with metadata See here SIMD Single Instruction, Multiple Data CPU-specific instructions that can process more data in a single instruction SIG Special Interest Group E.g., Distutils-SIG (now replaced by Discourse) SSE Streaming SIMD Extensions Various extensions to the x86 instruction set (SSE, SSE2, SSE3, SSSE3, SSE4) for SIMD TOML Tom's Obvious Minimal Language Configuration language chosen for <code>pyproject.toml</code>, <code>cargo</code> etc., see here UCRT Universal C Runtime Windows equivalent to glibc/musl UI User Interface UX User eXperience VCS Version Control System Tool to keep track of changes in source code, e.g. <code>git</code> <code>venv</code> Virtual ENVironments Python standard library module for creating environments; distinct from <code>virtualenv</code> See here"},{"location":"glossary/#terms","title":"Terms","text":"Term Explanation Examples / References Architecture In the context of packaging software, this generally refers to the CPU architecture (=ISA) ABI Break Failing to maintain the ABI See here Binary Compatibility Succeeding to maintain the ABI (e.g. across versions / upgrades) See here Build Backend Specifically in the context of <code>pyproject.toml</code> builds, the tool responsible for building a Python package <code>setuptools</code>, <code>flit</code>, <code>hatch</code>, ... Build Frontend Specifically in the context of <code>pyproject.toml</code> builds, the tool used to trigger a build Predominantly <code>pip</code> Calling Convention Agreed-upon contract with describes how to interact with a given CPU (family) See here <code>cargo</code> Package manager for the Rust language, often upheld as a positive example for installation UX See here Conda Cross-platform package &amp; environment manager, based on distribution channels separate from PyPI See here Conda-forge Community-led packaging effort for (predominantly) Python packages See here Cross-compilation Compiling on a given platform for  another platform See here (64 bit) Data Models Choice of bit-widths for <code>int</code>/<code>long</code> integer types ILP32, ILP64, LP64; see here Demuxer / Demuxing Colloquial name for demultiplexing, which can be considered a single-input, multiple-output switch See here Distribution An entity distributing (consistent) binary artefacts, often forming its own ecosystem Incl. OS: Debian, Fedora, Ubuntu, RHEL...OS-less: Conda, Spack, Homebrew, ... <code>distutils</code> Python standard library module for building and installing packages; added in 1.6, to be removed in 3.12 See here <code>easy_install</code> Deprecated method for installing Python packages, superseded by <code>pip install</code> See here Egg Historical format for distributing Python packages See here Emulation Pretending to run on a different CPU architecture; this can be used to avoid cross-compilation See QEMU, resp. here Linker A tool to correctly find the required third-party symbols for a given project GNU's gold, LLVM's lld, mold Mamba Alternative implementation of the <code>conda</code> CLI tool with a faster solver See here Manylinux Baseline tooling to allow distributing wheels across various Linux distributions See PEP 600 and the PEPs it replaces <code>numpy.distutils</code> Extension to <code>distutils</code>, adding i.a. support for BLAS/LAPACK, Fortran, SIMD etc. See here Platform Colloquially used as interchangeable with the OS, though really only fully specified by the target triple <code>pyproject.toml</code> Standard metadata file for Python packages See PEP 517 &amp; 518 <code>setuptools</code> Most widely used tool for building Python packages; new home of <code>distutils</code> See here Symbol A compiled version of a function See here Tarball Colloquial name for various flavors of <code>.tar</code> archive files See here (Target) Triple Unambiguous specification of the platform for the purpose of (cross-)compiling software for it, usually <code>&lt;arch&gt;-&lt;vendor&gt;-&lt;OS&gt;</code> See PEP 11, resp. here or here <code>virtualenv</code> Installable module for handling virtual environments; largely a superset of <code>venv</code> See here Wheel A format for distributing and installing binary artefacts for Python packages; essentially a tarball plus metadata See here"},{"location":"philosophy_and_design_space/","title":"Philosophy and Design Space","text":""},{"location":"philosophy_and_design_space/#foreword","title":"Foreword","text":"<p>Any proposal, solution, or technical implementation is built upon certain foundational assumptions - what we refer to as \"design axioms\". These are core ideas, principles and mantras guiding our thinking processes, design and engineering. It helps to evaluate the feasibility of different solutions and their respective effectiveness.</p> <p>We believe that clearly stating the ideals and principles guiding our proposals helps focus our efforts, and establishes a shared understanding of the reasoning behind our suggestions.  By framing the discussions around these core principles, we hope that it will be clear that given the myriad of packaging issues we could try to improve, why it's these issues we are spending our time and energy on.</p> <p>Discussions on these principles themselves is of course welcome!  We always want to ensure that our foundational ideals are consistent and relevant, and lead to outcomes that benefit the wider Python community of packaging producers, consumers, users, and tool makers who care deeply about the experience.</p>"},{"location":"philosophy_and_design_space/#design-axioms","title":"Design Axioms","text":""},{"location":"philosophy_and_design_space/#evolution-not-revolution","title":"Evolution Not Revolution","text":"<p>The Python packaging ecosystem has evolved over many decades, with much good work, contributions, healthy discussions, user studies, and improvements along the way.  We recognize that the landscape is vast and the user population is huge.  It takes a long time for changes to percolate through the long tail of tools, services, and workflows that form the everyday basis of people's lives.</p> <p>Therefore we strongly believe in the ongoing evolution of packaging standards and solutions, not a wholesale revolution in the way people and tools operate.</p>"},{"location":"philosophy_and_design_space/#if-you-dont-care-now-you-wont-care-later","title":"If you don't care now, you won't care later","text":"<p>For many use cases and users, Python packaging is \"good enough\". Maybe they are building libraries and applications that don't ever touch the \"Accelerated Python\" ecosystem.  Python is used in so many domains and at such widely varying scales, from one-off scripts to large, long lived application platforms, and more.  The niche of problems that WheelNext is trying to solve simply don't affect everyone.</p> <p>Therefore we strongly believe that if you are one of those users who doesn't care now about the problems WheelNext is trying to solve, you will still not care when the solutions being proposed. In other words, to you, \"if it ain't broke, it ain't gonna be fixed\".</p>"},{"location":"philosophy_and_design_space/#dont-focus-on-a-single-tool-or-service","title":"Don't focus on a single tool or service","text":"<p>Despite the overwhelming popularity of <code>pip</code> and <code>PyPI</code>, these aren't the only games in town.  For example, <code>uv</code> has a <code>pip</code> compatible interface which is gaining popularity, and there are many alternative PyPI compatible services, some open source and some commercial.  Whenever possible, try to propose solutions that can be adopted across all relevant tools, and think about the level of effort to get other indexes or installers on board.</p>"},{"location":"philosophy_and_design_space/#favor-backward-compatible-changes-whenever-possible","title":"Favor backward compatible changes whenever possible","text":"<p>The Python packaging ecosystem is complex and used in many different ways. It is preferred to not modify tools in a way that would either break the function of a previous version of the installers (not yet supporting feature X) or to modify the meaning or behavior of a given flag or usecase.</p>"},{"location":"philosophy_and_design_space/#be-intentful-and-explicit-on-what-is-being-broken-and-why","title":"Be intentful and explicit on what is being broken and why","text":"<p>Some changes or evolutions require non-backward compatible changes to be implemented. In these cases, it is important to be explicit on what behavior(s) or functionality(ies) needs to be modified in a non backward compatible way, why it's important, what is to gain and why it's considered the best approach.</p>"},{"location":"philosophy_and_design_space/#complexity-in-the-tooling-rather-than-user-experience","title":"Complexity in the tooling rather than user experience","text":"<p>We thrive to design a simple and efficient user experience. As often as possible, we aim to hide any complexity into the tooling ecosystem itself and offer the most streamline user experience possible. This means we care about the full end-to-end user experience from the packaging step to the end-user installation of a given package.</p>"},{"location":"philosophy_and_design_space/#mode-of-operation","title":"Mode of Operation","text":""},{"location":"philosophy_and_design_space/#proof-of-concept-minimum-viable-product-first-pep-second","title":"Proof-of-Concept / Minimum-Viable-Product first, PEP second.","text":"<p>We believe in quick engineering cycles, rapid design reviews and iterations. We recognize that an informed discussion is a lot easier when the PEP is accompanied by an actual \"technical implementation\" (even minimal and crude) of the proposed change. This can be in the form of a PR to any number of projects, a \"pip install-able\" package, etc.</p>"},{"location":"philosophy_and_design_space/#avoid-mission-creep","title":"Avoid mission creep","text":"<p>We all have our pet peeves and complaints about packaging.  Regardless of how you interface with the packaging ecosystem, it's pretty much guaranteed that if you do, there are things that bug you about it.  WheelNext cannot solve all these problems, and to attempt to will dilute the limited bandwidth and resources of its participants.  There are also plenty of ways to improve things outside the scope of WheelNext, and we encourage you to do so!  Let's keep WheelNext focused on the problems we can improve and resist the temptation to fix the world.</p>"},{"location":"philosophy_and_design_space/#principles-of-participation","title":"Principles of participation","text":""},{"location":"philosophy_and_design_space/#be-fully-open-transparent-and-collaborative","title":"Be fully open, transparent, and collaborative","text":"<p>All work for the WheelNext solutions is done in the open, with full transparency and collaboration, adhering to the spirit of Open Source.  We welcome participation from all stakeholders and interested parties.  We strongly believe that solutions which represent the widest possible consensus will yield the best results, and the most widespread and quickest adoption across the ecosystem.  We'll rely on all participants to help improve proposals, implement prototypes and production quality code, and perhaps most of all adopt and spread the word about how these solutions improve your projects and the lives of your users.</p>"},{"location":"philosophy_and_design_space/#stay-positive-and-keep-things-moving","title":"Stay positive and keep things moving","text":"<p>It's simply the nature of things for discussions on discuss.python.org (DPO) to go on seemingly forever, with long threads that are difficult to get resolution on.  This can be demoralizing, but we encourage you to stay positive!  We are making a difference!  Try to avoid putting too much Stop Energy into discussions and instead focus on Forward Motion.</p> <p>Most discussion threads often seem to lose steam and the longer they go on, the more difficult it is for people to keep up on where things stand.  Plan to inject timely updates to keep the momentum going.  Suggestions include posting periodic summaries of resolved and open issues so that people don't have to scroll all the way to the beginning of a long thread to catch up.  Keep good notes of the changes you're making based on the discussion, and post updates outlining the changes.  Plan on posting regular status reports about proofs of concept, prototypes, demos, and working code that folks can try.  Video demos are nice too!  If you've made significant changes to a proposal, don't be afraid to start a new thread to \"reboot\" the topic.</p>"},{"location":"philosophy_and_design_space/#code-of-conduct","title":"Code of Conduct","text":"<p>The Python Software Foundation itself publishes a code of conduct which the Python Packaging Authority (PyPA) also adopts.</p> <p>We strongly believe that it is of the utmost importance to treat each other with respect, and assume each other's best intentions, especially when we disagree!  Disagreement can be healthy for reaching consensus on the best solutions, given the complex and myriad constraints we're working with.</p>"},{"location":"slidedecks_resources/","title":"SlideDecks &amp; Resources","text":"<p>This page serves as a central hub for referencing and linking the various presentations, reports, and key materials related to the WheelNext Open Source Initiative. Whether you're looking for past discussions, technical deep dives, or strategic updates, you'll find a curated collection of resources to keep track and engage with the project's progress.</p>"},{"location":"slidedecks_resources/#monthly-presentations","title":"Monthly Presentations","text":"<ul> <li>[2025/02] WheelNext Community Update - SlideShow</li> </ul>"},{"location":"slidedecks_resources/#engineering-presentations","title":"Engineering Presentations","text":"<ul> <li>[2025/02] Wheel Variant ~ Engineering Review - SlideShow</li> </ul>"},{"location":"proposals/pep759_external_wheel_hosting/","title":"PEP 759 - External Wheel Hosting","text":"Resource Link <code>PEP Link</code> https://peps.python.org/pep-0759/ <code>DPO Discussion</code> PEP 759, External Wheel Hosting <code>Github Repository</code>"},{"location":"proposals/pep759_external_wheel_hosting/#abstract","title":"Abstract","text":""},{"location":"proposals/pep759_external_wheel_hosting/#motivation","title":"Motivation","text":""},{"location":"proposals/pep759_external_wheel_hosting/#rationale","title":"Rationale","text":""},{"location":"proposals/pep759_external_wheel_hosting/#specification","title":"Specification","text":""},{"location":"proposals/pep759_external_wheel_hosting/#backward-compatibility","title":"Backward Compatibility","text":""},{"location":"proposals/pep759_external_wheel_hosting/#security-implications","title":"Security Implications","text":""},{"location":"proposals/pep759_external_wheel_hosting/#how-to-teach-this","title":"How to teach this","text":""},{"location":"proposals/pep759_external_wheel_hosting/#reference-implementation","title":"Reference Implementation","text":""},{"location":"proposals/pep759_external_wheel_hosting/#rejected-ideas","title":"Rejected Ideas","text":""},{"location":"proposals/pep759_external_wheel_hosting/#open-issues","title":"Open issues","text":""},{"location":"proposals/pep766_explicit_priority_choices/","title":"PEP 766 - Explicit Priority Choices Among Indexes","text":"Resource Link <code>PEP Link</code> https://peps.python.org/pep-0766/ <code>DPO Discussion</code> PEP 766: handling multiple indexes (Index Priority) <code>Github Repository</code> https://github.com/wheelnext/pep_766/"},{"location":"proposals/pep766_explicit_priority_choices/#abstract","title":"Abstract","text":""},{"location":"proposals/pep766_explicit_priority_choices/#motivation","title":"Motivation","text":""},{"location":"proposals/pep766_explicit_priority_choices/#rationale","title":"Rationale","text":""},{"location":"proposals/pep766_explicit_priority_choices/#specification","title":"Specification","text":""},{"location":"proposals/pep766_explicit_priority_choices/#backward-compatibility","title":"Backward Compatibility","text":""},{"location":"proposals/pep766_explicit_priority_choices/#security-implications","title":"Security Implications","text":""},{"location":"proposals/pep766_explicit_priority_choices/#how-to-teach-this","title":"How to teach this","text":""},{"location":"proposals/pep766_explicit_priority_choices/#reference-implementation","title":"Reference Implementation","text":""},{"location":"proposals/pep766_explicit_priority_choices/#rejected-ideas","title":"Rejected Ideas","text":""},{"location":"proposals/pep766_explicit_priority_choices/#open-issues","title":"Open issues","text":""},{"location":"proposals/pep771_default_extras/","title":"PEP 771 - Default Extras for Python Packages","text":"Resource Link <code>PEP Link</code> https://peps.python.org/pep-0771/ <code>DPO Discussion</code> PEP 771: Default Extras for Python Software Packages <code>DPO Discussion [old]</code> (pre-publish) PEP 771: Default Extras for Python Software Packages <code>Github Repository</code> https://github.com/wheelnext/pep_771/"},{"location":"proposals/pep771_default_extras/#abstract","title":"Abstract","text":""},{"location":"proposals/pep771_default_extras/#motivation","title":"Motivation","text":""},{"location":"proposals/pep771_default_extras/#rationale","title":"Rationale","text":""},{"location":"proposals/pep771_default_extras/#specification","title":"Specification","text":""},{"location":"proposals/pep771_default_extras/#backward-compatibility","title":"Backward Compatibility","text":""},{"location":"proposals/pep771_default_extras/#security-implications","title":"Security Implications","text":""},{"location":"proposals/pep771_default_extras/#how-to-teach-this","title":"How to teach this","text":""},{"location":"proposals/pep771_default_extras/#reference-implementation","title":"Reference Implementation","text":""},{"location":"proposals/pep771_default_extras/#rejected-ideas","title":"Rejected Ideas","text":""},{"location":"proposals/pep771_default_extras/#open-issues","title":"Open issues","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/","title":"PEP 777 - How to Re-invent the Wheel","text":"Resource Link <code>PEP Link</code> https://peps.python.org/pep-0777/ <code>DPO Discussion</code> PEP 777: How to Re-invent the Wheel <code>Github Repository</code>"},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#abstract","title":"Abstract","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#motivation","title":"Motivation","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#rationale","title":"Rationale","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#specification","title":"Specification","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#backward-compatibility","title":"Backward Compatibility","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#security-implications","title":"Security Implications","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#how-to-teach-this","title":"How to teach this","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#reference-implementation","title":"Reference Implementation","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#rejected-ideas","title":"Rejected Ideas","text":""},{"location":"proposals/pep777_how_to_reinvent_the_wheel/#open-issues","title":"Open issues","text":""},{"location":"proposals/pep778_symlink_support/","title":"PEP 778 - Supporting Symlinks in Wheels","text":"Resource Link <code>PEP Link</code> https://github.com/python/peps/pull/3786 <code>DPO Discussion</code> PEP 778: Supporting Symlinks in Wheels <code>Github Repository</code>"},{"location":"proposals/pep778_symlink_support/#abstract","title":"Abstract","text":""},{"location":"proposals/pep778_symlink_support/#motivation","title":"Motivation","text":""},{"location":"proposals/pep778_symlink_support/#rationale","title":"Rationale","text":""},{"location":"proposals/pep778_symlink_support/#specification","title":"Specification","text":""},{"location":"proposals/pep778_symlink_support/#backward-compatibility","title":"Backward Compatibility","text":""},{"location":"proposals/pep778_symlink_support/#security-implications","title":"Security Implications","text":""},{"location":"proposals/pep778_symlink_support/#how-to-teach-this","title":"How to teach this","text":""},{"location":"proposals/pep778_symlink_support/#reference-implementation","title":"Reference Implementation","text":""},{"location":"proposals/pep778_symlink_support/#rejected-ideas","title":"Rejected Ideas","text":""},{"location":"proposals/pep778_symlink_support/#open-issues","title":"Open issues","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/","title":"PEP ### - Build Isolation Bypass","text":"Resource Link <code>PEP Link</code> <code>To Be Published</code> <code>DPO Discussion</code> [Build Isolation Passthrough] Allowing a \"package\u201d to passthrough the build isolation <code>Github Repository</code>"},{"location":"proposals/pepxxx_build_isolation_bypass/#abstract","title":"Abstract","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/#motivation","title":"Motivation","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/#rationale","title":"Rationale","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/#specification","title":"Specification","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/#backward-compatibility","title":"Backward Compatibility","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/#security-implications","title":"Security Implications","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/#how-to-teach-this","title":"How to teach this","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/#reference-implementation","title":"Reference Implementation","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/#rejected-ideas","title":"Rejected Ideas","text":""},{"location":"proposals/pepxxx_build_isolation_bypass/#open-issues","title":"Open issues","text":""},{"location":"proposals/pepxxx_wheel_variant_support/","title":"PEP ### - Wheel Variants","text":"Resource Link <code>PEP Link</code> <code>To Be Published</code> <code>DPO Discussion</code> Implementation variants: rehashing and refocusing <code>Github Repository</code> https://github.com/wheelnext/pep_wheel_variants"},{"location":"proposals/pepxxx_wheel_variant_support/#abstract","title":"Abstract","text":"<p>This PEP proposes an evolution of Python Wheels standard to support hardware-specific or platform-dependent package variants. Current mechanisms for distinguishing Python Wheels (i.e Python ABI version, OS, CPU architecture, and Build ID) are insufficient for modern hardware diversity, particularly for environments requiring specialized dependencies such as high performance computing, accelerated computing (GPU, FPGA, ASIC, etc.), etc.</p> <p>This proposal introduces <code>Wheel Variants</code>, a mechanism for publish platform-dependant wheels and selecting the most suitable package variant for a given platform.</p> <p>To enable fine-grained package selection without fragmenting the Python ecosystem, this PEP proposes:</p> <ul> <li> <p>A <code>Wheel Variant</code> system that enables multiple wheels for the same Python package version, distinguished by hardware-specific attributes.</p> </li> <li> <p>A <code>Provider Plugin</code> system that dynamically detects platform attributes and recommends the most suitable wheel.</p> </li> <li> <p>A hash-based identification mechanism for wheel variants, ensuring compatibility while maintaining clarity in package naming.</p> </li> </ul> <p>This approach allows seamless package resolution without requiring intrusive changes to <code>installers</code>, ensures backward compatibility, and minimizes the burden on package maintainers.</p>"},{"location":"proposals/pepxxx_wheel_variant_support/#motivation","title":"Motivation","text":"<p>Existing approaches to handling platform-specific Python packages are suboptimal. Some methods include maintaining separate package indexes for different hardware configurations, bundling all potential dependencies into a single \"mega-wheel,\" or creating separate package names (<code>mypackage-gpu</code>, <code>mypackage-cpu</code>). Each of these approaches has significant drawbacks, such as excessive binary size, dependency confusion, and inefficient dependency resolution, etc.</p> <p>The need for a systematic and scalable approach to selecting optimized wheels based on platform characteristics has become increasingly urgent as Python usage expands across diverse computing environments, from cloud computing to embedded systems and AI accelerators.</p>"},{"location":"proposals/pepxxx_wheel_variant_support/#rationale","title":"Rationale","text":""},{"location":"proposals/pepxxx_wheel_variant_support/#user-stories","title":"User Stories","text":"<ul> <li> <p>A user wants to install a version of NumPy that is accelerated for their CPU architecture.</p> </li> <li> <p>A user wants to install a version of PyTorch that is accelerated for their GPU architecture.</p> </li> <li> <p>A user wants to install a version of mpi4py that has certain features enabled (e.g. specific MPI implementations for their hardware).</p> </li> <li> <p>A library maintainer wants to build their library for wasm32-wasi with and without pthreads support.</p> </li> <li> <p>A library maintainer wants to build their library for an Emscripten platform for Pyodide with extensions for graphics compiled in.</p> </li> <li> <p>A library maintainer wants to provide packages of their game library using different graphics backends.</p> </li> <li> <p>SciPy wants to provide packages built against different BLAS libraries, like OpenBLAS and Accelerate on macOS. This is something they indirectly do today</p> </li> <li> <p>Manylinux standard doesn\u2019t cover all use-cases: github.com/pypa/manylinux/issues/1725</p> </li> </ul>"},{"location":"proposals/pepxxx_wheel_variant_support/#specification","title":"Specification","text":""},{"location":"proposals/pepxxx_wheel_variant_support/#wheel-variants","title":"Wheel Variants","text":"<p>A <code>Wheel Variant</code> is a Python Wheel designed to support a specific platform configuration. Wheel Variants will follow an extended filename pattern, incorporating an additional hash to indicate a specific variant:</p> <pre><code>mypackage-0.0.1~abcd1234-py3-none-any.whl\n</code></pre> <p>This <code>~abcd1234</code> hash is computed based on platform attributes detected by the user-installed <code>provider plugins</code> and aggregated by <code>variantlib</code>, ensuring uniqueness and scalability while maintaining compatibility with existing tooling. The <code>variantlib</code> library will generate these hashes using <code>hashlib.shake_128()</code>, providing a lightweight and deterministic method of identifying platform-specific variants.</p>"},{"location":"proposals/pepxxx_wheel_variant_support/#provider-plugins","title":"Provider Plugins","text":"<p>A <code>Provider Plugin</code> detects the characteristics of the host platform and provides relevant metadata to <code>variantlib</code>. Each plugin must implement a standard entry point:</p> <pre><code>[project.entry-points.\"variantlib.plugins\"]\nmy_plugin = \"my_plugin.plugin:MyVariantPlugin\"\n</code></pre> <p>The plugin itself follows a minimal interface:</p> <pre><code>from variantlib.config import ProviderConfig\nfrom my_plugin import __version__\n\nclass MyVariantPlugin:\n    __provider_name__ = \"my_plugin\"\n    __version__ = __version__\n\n    def run(self) -&gt; ProviderConfig | None:\n        \"\"\"\n        Detects platform attributes and returns a ProviderConfig if applicable.\n        \"\"\"\n</code></pre>"},{"location":"proposals/pepxxx_wheel_variant_support/#integration-with-installers","title":"Integration with <code>installers</code>","text":"<p>Upon package installation, <code>pip/uv/etc.</code> will:</p> <ol> <li> <p>Query <code>variantlib</code> for installed <code>Provider Plugins</code>.</p> </li> <li> <p>Generate a list of possible variant hashes based on detected attributes.</p> </li> <li> <p>Search package repositories for matching wheels.</p> </li> <li> <p>Select the most relevant variant based on predefined priority rules.</p> </li> <li> <p>Install the selected wheel, or fall back to a generic version if no variant is found.</p> </li> <li> <p>Users must have control over which plugins are active, with the ability to disable or prioritize them via <code>pip.conf</code> or <code>variant.conf</code>.</p> </li> <li> <p>A <code>[uv] pip install --no-variant package</code> option should be available to force installation of generic wheels.</p> </li> <li> <p>A <code>[uv] pip install --variant=abcd1234 package</code> option should be available to force installation of generic wheels.</p> </li> <li> <p>Platform detection can be expensive, it must be cache-able. The following caching policy might be a good start [ultimately up to the tool]</p> <ul> <li>Run once and cache</li> <li>Void at restart</li> <li>Void at plugin update</li> <li>Void manually: <code>[uv] pip cache --void variant_cache</code></li> </ul> </li> </ol>"},{"location":"proposals/pepxxx_wheel_variant_support/#backward-compatibility","title":"Backward Compatibility","text":"<p>The introduction of <code>Wheel Variants</code> does not break existing <code>installer</code> [<code>pip/uv/etc.</code>] versions, as older versions will simply ignore variant wheels. This is ensured by modifying the standard wheel filename regex ensures that legacy <code>pip</code> versions do not mistakenly install incompatible variants.</p>"},{"location":"proposals/pepxxx_wheel_variant_support/#security-implications","title":"Security Implications","text":"<p>The <code>Provider Plugin</code> mechanism introduces potential security risks, such as untrusted plugins providing misleading platform data. To mitigate this:</p> <ul> <li>Plugins should be sourced from trusted repositories. It's essentially remote code execution at install time.</li> </ul>"},{"location":"proposals/pepxxx_wheel_variant_support/#how-to-teach-this","title":"How to Teach This","text":"<p>User documentation will be updated to:</p> <ul> <li>Explain the concept of <code>Wheel Variants</code> and how they improve package selection.</li> <li>Provide guidance on writing and publishing <code>Provider Plugins</code>.</li> <li>Detail configuration options, such as overriding variant selection or disabling the feature entirely.</li> <li>Include debugging instructions for users encountering unexpected behavior.</li> </ul>"},{"location":"proposals/pepxxx_wheel_variant_support/#reference-implementation","title":"Reference Implementation","text":"<p>A prototype implementation has been developed, demonstrating:</p> <ul> <li> <p><code>variantlib</code>, the library handling plugin registration and variant selection.</p> </li> <li> <p>Demo <code>Provider Plugins</code> capable of detecting <code>fictional  hardware</code> and <code>fictional technology</code></p> </li> <li> <p>A modified version of <code>pip</code> integrating variant-aware package resolution.</p> </li> </ul>"},{"location":"proposals/pepxxx_wheel_variant_support/#rejected-ideas","title":"Rejected Ideas","text":"<p>Several alternative approaches were considered and ultimately rejected:</p> <ol> <li> <p>Explicit Package Naming (<code>mypackage-gpu</code>, <code>mypackage-cpu</code>)</p> <ul> <li>Leads to dependency resolution issues and combinatorial explosion of package variants.</li> </ul> </li> <li> <p>Bundling All Dependencies into a Single Wheel</p> <ul> <li>Results in unnecessarily large downloads and inefficiencies.</li> </ul> </li> <li> <p>Modifying <code>pip</code> Internals Directly</p> <ul> <li>Would impose significant maintenance burden on <code>pip</code> maintainers and slow adaptation to new hardware platforms.</li> </ul> </li> <li> <p>One index per configuration</p> <ul> <li>Significant user complexity. Force the user to carefully read the documentation.</li> <li>Totally breaks the dependency tree: <code>transformers =&gt; pytorch</code></li> </ul> </li> </ol> <p></p>"},{"location":"proposals/pepxxx_wheel_variant_support/#open-issues","title":"Open Issues","text":"<ol> <li> <p>Dependency Management</p> <ul> <li>How should dependencies be expressed when a package depends on a variant of another package?</li> </ul> </li> <li> <p>Lockfile Support</p> <ul> <li>Should lockfiles store variant hashes or remain variant-agnostic?</li> </ul> </li> <li> <p>Platform Detection Edge Cases</p> <ul> <li>How should plugins handle ambiguous or incomplete hardware information?</li> <li>Probably should stay up to the plugin maintainer to decide.</li> </ul> </li> <li> <p>How to maintain a source-of-truth</p> <ul> <li>Everybody who build CUDA-accelerated Wheel Variants need to use exactly the metadata that will be provided to installers.</li> <li>Same logic for CPU, every <code>AVX512</code> accelerated package need to highlight that feature in the exact same way.</li> <li>Shall we have a package like <code>troveclassifiers</code> to act as a \"source of truth\" ?</li> </ul> </li> </ol>"},{"location":"proposals/pepxxx_wheel_variant_support/#conclusion","title":"Conclusion","text":"<p>This proposal outlines a scalable and backward-compatible solution for platform-specific Python Wheel distribution. By leveraging <code>Wheel Variants</code> and <code>Provider Plugins</code>, this mechanism simplifies package installation for users while maintaining efficiency for package maintainers and repository hosts.</p>"}]}